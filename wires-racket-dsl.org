* basic test circuit

#+begin_src wires
x AND y -> d
x OR y -> e
x LSHIFT 2 -> f
y RSHIFT 2 -> g
NOT x -> h
NOT y -> i
123 -> x
456 -> y
#+end_src

#+RESULTS:
: d: 72
: e: 507
: f: 492
: g: 114
: h: 65412
: i: 65079
: x: 123
: y: 456

Things can be specified in any order, so the top-to-bottom state
modification from stacker won't work. We need to delay evaluation until
we have everything.

Our go-to tool for delaying evaluation: functions!

Idea is: a wire is a function you can call to get its value.

#+begin_src racket
(define (d) (wires-and (x) (y)))
;; etc for or, lshift, rshift. And then the unary operator:
(define (h) (wires-not (x)))
;; and constants:
(define (x) 123)
#+end_src

The operators would do something like:

#+begin_src racket
(define (wires-and x y)
  (bitwise-and (x) (y)))
#+end_src

Then in the above puzzle/circuit, the question of "what's the signal on
wire d?" is just ~(d)~.
* Holy #*@#$* this macro does, like 80% of the DSL
:PROPERTIES:
:CREATED:  [2025-07-15T15:27:29-0500]
:END:

Holy shit, this macro is about 80% of the way to what I need:

#+begin_src racket
(define-syntax wires-operator
                 ;; literal:
  (syntax-rules (AND OR LSHIFT RSHIFT NOT ->)
    [(wires-operator lhs AND rhs -> dest)
     (define (dest) (printf "bitwise AND ~s ~s to ~s" lhs rhs dest))]
    [(wires-operator NOT lhs -> dest)
     (define (dest) (printf "bitwise NOT of ~s to ~s" lhs dest))]
    [(wires-operator input -> dest)
     (define (dest) (printf "input ~s to ~s" input dest))]
    ))

#+end_src

#+RESULTS:
: macrology.rkt> (wires-operator x AND y -> d)
: ;; no output, it just defined 'd'
: macrology.rkt> (wires-operator 456 -> y)
: macrology.rkt> (wires-operator 123 -> x)
: macrology.rkt> (x)
: input 123 to #<procedure:x>
: macrology.rkt> (y)
: input 456 to #<procedure:y>
: macrology.rkt> (d)
: bitwise AND #<procedure:x> #<procedure:y> to #<procedure:d>
: macrology.rkt> (wires-operator NOT d -> e)
: macrology.rkt> (e)
: bitwise NOT of #<procedure:d> to #<procedure:e>
: macrology.rkt>

Now get the functions to call each other!

* ...but the remaining 20% took 90% of the time 🙁

From the working macro, I wanted to get the rest of this working. I
wanted a script like this to Just Work:

#+begin_src wires
#lang wires

// comments allowed

x AND y -> d
x OR y -> e
123 -> x
456 -> y
SHOW d
SHOW e
#+end_src

From Beautiful Racket, I know I need a reader, and I wanted to copy the
stacker example from there and just wrap each line in ~(wires-operator
LINE)~; that would get passed to an expander that knew about the
`wires-operator` macro and would, well, expand the macro into plain
Racket code and run that.

BR provides some syntactic sugar -- its ~#lang br/quicklang~ and such --
that makes that pretty easy, but I don't want to depend on that, and to
use plain, base Racket. It turns out that getting all those details
right is finicky, tedious, boilerplate-y, and poorly documented.

See [[https://racket.discourse.group/t/confused-about-setup-for-reader-and-expander-for-simple-dsl/3859][my Racket discourse thread]].

** making =#lang wires= work

You need a collection? I thought that using =raco pkg install= did that?

https://docs.racket-lang.org/guide/module-basics.html#(part._link-collection)

Okay, I did =raco pkg install=...but then it looks like you need to do
=raco setup=. when I do that:

#+begin_verbatim
raco setup: --- installing collections ---                         [9:41:11]
raco setup: --- post-installing collections ---                    [9:41:11]
raco setup: --- summary of errors ---                              [9:41:11]
raco setup: error: during making for <pkgs>/wires
raco setup:   standard-module-name-resolver: collection not found
raco setup:     for module path: wires/lang/reader
raco setup:     collection: "wires/lang"
raco setup:     in collection directories:
raco setup:      /home/dan/.local/share/racket/8.12/collects
raco setup:      /usr/share/racket/collects/
raco setup:      ... [207 additional linked and package directories]
raco setup:      sub-collection: "lang"
raco setup:     in parent directories:
raco setup:      /home/dan/Sync/code/racket/beautiful_racket/wires
raco setup:     compiling: <pkgs>/wires/wires-test.rkt
raco setup: error: during making for <pkgs>/wires
#+end_verbatim

When I made a =lang= subdirectory and put my reader code there as
=reader.rkt=, and also the expander code, it worked! (Building the
documentation still shows an error from the original raco stuff it put
in the =scribblings= directory, but I don't care about that for now.)

But, you can't run scripts from outside the =wires= directory; it fails
to find =wires-syntax= -- I think that's because of the way I'm
requiring the expander in the reader's output:

#+begin_src racket
    `(module wires racket/base
       (require "wires-syntax.rkt")
       ,@src-datums)
#+end_src

but using

: (require wires/lang/wires-syntax)

works!

* [[https://github.com/dandrake/wires-racket-dsl][github repo]]
* Then I tried to update code...and it doesn't work?

So, I discovered a bug in my code when using the full puzzle from Advent
of Code. The inputs to the various operators can be numbers or other
wires, and I wasn't handling these kinds of situations:

: a -> b

because my code assumes inputs are numbers, and

: a AND 42 -> b

because my code assumed the operands were both wires (functions).

Okay, I can fix that. I started updating my code and made a trivial
change to start investigating. All I did was a single line to my
expander code, in one of the helper functions. Just a =printf=. But it
doesn't seem to be executed...so racket is looking at outdated code?
It's compiling it, but wires scripts aren't using the updated code.

So I'm flailing with various raco commands.

I try removing the package and reinstalling: =raco pkg remove wires=,
then =raco pkg install ./wires=; that gave me a bunch of errors because,
I think, I had fiddled with `main.rkt`. Okay, I fix that and try to
install again: after a failed installation, I do the same thing, and
raco says it's already installed!

But I removed the package, and then tried to install it...and failed.
But somehow raco thinks it succeeded?

And even now, =racket puzzle.rkt= isn't using my updated macro code.

But =raco expand puzzle.rkt= shows what I expect -- it is super
confusing that =racket= and =raco= don't agree.

Ah, it seems that when you install the package, it compiles all the
=.rkt= files, and =racket= uses the compiled version even if the source
file is newer. So it's not working like a Makefile. If I move my script
elsewhere, =racket= doesn't find a compiled version and uses the updated
code.

So the lesson is: it's really hard to do ad-hoc testing and dev in the
package/language directory.

* Memoizing, hash tables, graphs, BFS, oh my

I suspected that the provided Advent of Code puzzle had some
dependencies that formed a cycle -- that is, that the dependencies graph
wasn't a directed acyclic graph (DAG).

I added code to build that, and sadly, it *is* a DAG! See =puzzle.pdf=
for that huge graph.

The ultimate problem is this: given a wire/node in the dependencies
graph, there can be multiple paths to the "numerical signal" root, and
those paths can branch. Each branch (which corresponds to a binary
operator like =AND= or =OR=) doubles the number of paths to the root,
and the =eval-rec= function's naive recursion follows all of them and
takes forever.

What I thought was an infinite loop isn't infinite, it's just big enough
to take forever or run out of memory.

I have a bunch of nice code here for working with the hash tables, for
memoizing functions, for doing the graph searches...but the algorithms I
have, while correct, are easily defeated by puzzles like the provided
AoC one. See [[https://racket.discourse.group/t/macro-expansion-evaluating-a-pattern-variable-that-could-be-a-number-or-a-function/3862/11?u=ddrake][my post on Racket discourse]] for some more details.

* EOF config                                                        :ARCHIVE:
#  LocalWords:  stacker memoizing AoC
